package sstrange;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;

import sstrange.anomaly.AnomalyTuple;
import sstrange.matchgenerator.ComparisonPairTuple;

public class IndexHTMLGenerator {

	public static void generateHtml(String assignmentRootPath, ArrayList<ComparisonPairTuple> codePairs,
			ArrayList<AnomalyTuple> anomalies, String coreTemplateHTMLPath, String outputDirPath, double threshold,
			double disThreshold, String languageCode) throws Exception {

		String tableContent = getTableContent(codePairs, languageCode);
		String dissimTableContent = getDissimTableContent(anomalies, languageCode);

		String logoHeader = "<div class=\"embedimage\" style=\"width:15%;margin-left:0px;\">\r\n"
				+ "					<img class=\"embedimage\" src=\"strange_html_layout_additional_files/logo.png\" alt=\"logo STRANGE\">\r\n"
				+ "				</div>";

		// create directory
		File dirRoot = new File(outputDirPath);
		if (dirRoot.exists() == false)
			dirRoot.mkdir();

		// generate the html page
		File templateFile = new File(coreTemplateHTMLPath);
		File outputFile = new File(outputDirPath + File.separator + "index.html");
		BufferedReader fr = new BufferedReader(new FileReader(templateFile));
		BufferedWriter fw = new BufferedWriter(new FileWriter(outputFile));
		String line;
		while ((line = fr.readLine()) != null) {

			if (line.contains("@filepath")) {
				line = line.replace("@filepath", assignmentRootPath);
			}

			if (line.contains("@logo")) {
				line = line.replace("@logo", logoHeader);
			}

			if (line.contains("@about")) {
				line = line.replace("@about", (languageCode.equals("en")) ? getAboutEn() : getAboutID());
			}

			if (line.contains("@threshold")) {
				line = line.replace("@threshold", String.format("%.0f", threshold));
			}

			if (line.contains("@disthreshold")) {
				line = line.replace("@disthreshold", String.format("%.0f", disThreshold));
			}

			if (line.contains("@tablecontent")) {
				line = line.replace("@tablecontent", tableContent);
			}

			if (line.contains("@dissimaitablecontent")) {
				line = line.replace("@dissimaitablecontent", dissimTableContent);
			}

			if (line.contains("@explanation"))
				line = line.replace("@explanation",
						(languageCode.equals("en")) ? getExplanationContentEn() : getExplanationContentID());

			fw.write(line);
			fw.write(System.lineSeparator());
		}
		fr.close();
		fw.close();
	}

	private static String getExplanationContentID() {
		String s = "";

		s += "<ul>\r\n"
				+ "				<li>Plagiarisme konvensional dapat diidentifikasi melalui kumpulan karya yang sama (similarity). </li>\r\n"
				+ "				<li>Kecurangan berbasis kontrak dan plagiarisme yang sangat disamarkan dapat diidentifikasi dari kumpulan karya yang terlalu unik (uniqueness). </li>\r\n"
				+ "				<li>Plagiarisme dengan bantuan kecerdasan buatan dapat diidentifikasi dari kumpulan karya yang terlalu unik (uniqueness) atau yang terlalu sama dengan sampel karya kecerdasan buatan (AI sim). </li>\r\n"
				+ "				<li>Kolom kosong artinya hasil tidak relevan dengan karya.</li>\r\n"
				+ "				<li>MinHash dan Super-Bit bisa gagal mengenali karya yang sama karena mekanisme bucket.</li>\r\n"
				+ "				</ul>";

		return s;
	}

	private static String getExplanationContentEn() {
		String s = "";

		s += "<ul>\r\n"
				+ "				<li>Conventional plagiarism can be observed from similar submissions. </li>\r\n"
				+ "				<li>Contract cheating and highly disguised plagiarism can be observed from overly-unique submissions. </li>\r\n"
				+ "				<li>AI assisted plagiarism can be observed from overly-unique submissions or AI-similar submissions. </li>\r\n"
				+ "				<li>Empty fields mean not applicable.</li>\r\n"
				+ "				<li>MinHash and Super-Bit might fail to recognise similar submissions due to their bucketing mechanism.</li>\r\n"
				+ "				</ul>";

		return s;
	}

	public static String getAboutEn() {
		return "<ol>\r\n"
				+ "				<li>This HTML page is generated by SSTRANGE, a scalable and efficient tool to observe similarities among submissions with locality sensitive hashing. The details can be seen in <b><u><a href = \"https://github.com/oscarkarnalim/sstrange\">the Github page</a></u></b> or <b><u><a href=\"https://www.mdpi.com/2227-7102/13/1/54\">the corresponding publication</a></u></b></li>\r\n"
				+ "				<li>If you want to cite the program (or some parts of it), please cite the corresponding publication. </li>\r\n"
				+ "				</ol>";
	}

	public static String getAboutID() {
		return "<ol>\r\n"
				+ "				<li>Laman HTML ini dibuat dengan SSTRANGE, sebuah kakas skalabel dan efisien untuk mengobservasi kesamaan antar tugas dengan locality sensitive hashing. Detil dapat dilihat di <b><u><a href = \"https://github.com/oscarkarnalim/sstrange\">laman Github</a></u></b> atau <b><u><a href=\"https://www.mdpi.com/2227-7102/13/1/54\">publikasi terkait</a></u></b></li>\\r\\n"
				+ "				<li>Jika kamu ingin mensitasi program ini (atau bagian-bagiannya), mohon sitasi publikasi terkait. </li>\r\n"
				+ "				</ol>";
	}

	private static String getTableContent(ArrayList<ComparisonPairTuple> codePairs, String languageCode) {
		String textForObserve = "detail";
		if (languageCode.equals("id"))
			textForObserve = "detil";

		String s = "";
		int numID = 0;
		for (ComparisonPairTuple ct : codePairs) {
			// generate the ID
			String entryID = "r" + numID;

			// generate the string
			s += "<tr id=\"" + entryID + "\" onclick=\"selectRow('" + entryID + "','sumtablecontent')\">";
			s += ("\n\t<td class='first'><a>" + ct.getAssignmentName1() + " and " + ct.getAssignmentName2()
					+ "</a></td>");
			s += ("\n\t<td>" + String.format("%.0f", ct.getSyntaxSimResult()) + " %</td>");
			if (ct.getSurfaceSimResult() != -1)
				// if surface is calculated, the overall result is printed here
				s += ("\n\t<td>" + String.format("%.0f", ct.getSimResult()) + "%</td>");
			else
				s += ("\n\t<td></td>");

			s += ("\n\t<td><button onclick=\"window.open('" + ct.getResultedHTMLFilename() + "', '_self');\">"
					+ textForObserve + "</button></td>");

			s += "\n</tr>\n";

			// increment number for ID
			numID++;
		}
		return s;
	}

	private static String getDissimTableContent(ArrayList<AnomalyTuple> anomalies, String languageCode) {
		String textForObserve = "detail";
		if (languageCode.equals("id"))
			textForObserve = "detil";
		String aiTextForObserve = "AI sim";
		if (languageCode.equals("id"))
			aiTextForObserve = "mirip AI";

		String s = "";
		int numID = 0;
		for (AnomalyTuple an : anomalies) {
			// generate the ID
			String entryID = "a" + numID;

			// generate the string
			s += "<tr id=\"" + entryID + "\" onclick=\"selectRow('" + entryID + "','sumtablecontentdissimai')\">";
			s += ("\n\t<td class='first'><a>" + an.getAssignmentName() + "</a></td>");
			if (an.getDissimResult() == -1)
				s += ("\n\t<td></td>");
			else
				s += ("\n\t<td>" + String.format("%.0f", an.getDissimResult()) + " %</td>");
			if (an.getAiSim() == -1)
				s += ("\n\t<td></td>");
			else
				s += ("\n\t<td>" + String.format("%.0f", an.getAiSim()) + " %</td>");

			s += ("\n\t<td><button onclick=\"window.open('" + an.getResultedHTMLFilename() + "', '_self');\">"
					+ textForObserve + "</button>");

			if (an.getResultedAIHTMLFilename().length() > 0) {
				s += ("&nbsp;&nbsp;<button onclick=\"window.open('" + an.getResultedAIHTMLFilename() + "', '_self');\">"
						+ aiTextForObserve + "</button>");
			}

			s += "</td>\n</tr>\n";

			// increment number for ID
			numID++;
		}
		return s;
	}
}
